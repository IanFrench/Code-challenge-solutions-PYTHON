Given the positions of a white bishop and a black pawn on the standard chess board, determine whether the bishop can capture the pawn in one move.

The bishop has no restrictions in distance for each move, but is limited to diagonal movement. 


Example

For bishop = "a1" and pawn = "c3", the output should be
solution(bishop, pawn) = true
For bishop = "h1" and pawn = "h3", the output should be
solution(bishop, pawn) = false





Solution:
This one was more a mathematical problem once you dug into it. Ignoring the letters opn the grid and thinking of it as an 8 x 8 you could see the pattern numerically of where these pieces would intersect. The first thing I did was to convert both the pawn and bishops first value into an integer by using ORD-96 to get the equivalent to the 1-8 on the board and took the int of the second value. The pattern I saw was that as long as the absolute value of the differences between their first values and their second values were equal then the bishop could get to the pawn. 

Some examples  b a1 = [1,1] and p c3 = [3,3].  2 = 2 True   b h1 = [8,1] and p h3 = [8,3].  0 = 2    False  b e4 = [5,7] and p d6 = [4,6]. 1 = 1 True


def solution(bishop, pawn):
    
    
    b = [ord(bishop[0]) - 96, int(bishop[1])]
    p = [ord(pawn[0]) - 96, int(pawn[1])]

    return (abs((b[0]) - p[0]) == abs((b[1]) - p[1]))
    
