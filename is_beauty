This was an unpopular one with a lot more downvotes than up but nonetheless, here it is.

A string is said to be beautiful if each letter in the string appears at most as many times as the previous letter in the alphabet within the string; ie: b occurs no more times than a; c occurs no more times than b; etc. Note that letter a has no previous letter.

Given a string, check whether it is beautiful.

Example

For inputString = "bbbaacdafe", the output should be solution(inputString) = true.

This string contains 3 as, 3 bs, 1 c, 1 d, 1 e, and 1 f (and 0 of every other letter), so since there aren't any letters that appear more frequently than the previous letter, this string qualifies as beautiful.

For inputString = "aabbb", the output should be solution(inputString) = false.

Since there are more bs than as, this string is not beautiful.

For inputString = "bbc", the output should be solution(inputString) = false.

Although there are more bs than cs, this string is not beautiful because there are no as, so therefore there are more bs than as.


Solution: OK the thinking here was to initialize a Bool as false. Then using list comprehension to create a list of counts for each character in the reversed alphabet. So my res list would be counts of Z through A in order. Since the letter counts were not permitted to increase as the forward alphabet was traversed then if the sorted res (low to high) matched the actual res then it was True.  This method also caught outliers where there was a missed character such as "aaaabbbccf" where res would be (not including all the 0 places for all letters past f [1,0,0,2,3,4] while sorted res is [0,0,1,2,3,4] thus not a beauty. 



def solution(inputString):
    beauty = False
    res = [inputString.count(i) for i in string.ascii_lowercase[::-1]]
    if res == sorted(res):
        beauty = True 
        
    return beauty
    
