Write a function:

def solution(S)

that, given a string S, returns the index (counting from 0) of a character such that the part of the string to the left of that character is a reversal of the part of the string to its right. The function should return âˆ’1 if no such index exists.

Note: reversing an empty string (i.e. a string whose length is zero) gives an empty string.

For example, given a string:

"racecar"

the function should return 3, because the substring to the left of the character "e" at index 3 is "rac", and the one to the right is "car".

Given a string:

"x"

the function should return 0, because both substrings are empty.

Write an efficient algorithm for the following assumptions:

the length of S is within the range [0..2,000,000].

def solution(S):
    start = 0
    end = len(S)-1

    while start < end:

        if S[start] == S[end]:
            start +=1
            end -= 1
        else:
            return -1
    if start == end:
        return start
    return -1


#removing whitespace and converting all to lower
def solution(S):

    S = S.lower()
    S = S.replace(" ", "")    
    start = 0
    end = len(S)-1

    while start < end:

        if S[start] == S[end]:
            start +=1
            end -= 1
        else:
            return -1
    if start == end:
        return start
    return -1
    
    
    100% correct
