Task description
A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.

Count the minimal number of jumps that the small frog must perform to reach its target.

Write a function:

def solution(X, Y, D)

that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.

For example, given:

  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:

after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Write an efficient algorithm for the following assumptions:

X, Y and D are integers within the range [1..1,000,000,000];
X â‰¤ Y.



solution:  Figure out the total distance between X and Y then divide that by the distance and use the int value as the required jumps. To make sure that we get to or past the final value of Y for large numbers we compare the two values as float to int. If the float is bigger we need to add a jump.

def solution(X, Y, D):
    # write your code in Python 3.6
    difference = Y - X
    jump_f = float(difference / D)
    jump_i = int(difference / D)

    jumps_required = jump_i

    if jump_f > jump_i:
        jumps_required += 1
    
    return jumps_required

    pass
