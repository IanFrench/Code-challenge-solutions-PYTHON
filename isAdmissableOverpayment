From Codesignal Challenge:
After recently joining Instacart's beta testing developer group, you decide to experiment with their new API. 
You know that the API returns item-specific display-ready 
strings like 10.0% higher than in-store or 5.0% lower than in-store that inform users when the price of an item is different from the one in-store.
But you want to extend this functionality by giving people a better sense of how much more they will be paying for their entire shopping cart.

Your app lets a user decide the total amount x they are willing to pay via Instacart over in-store prices. This you call their price sensitivity.

Your job is to determine whether a given customer will be willing to pay for the given items in their cart based on their stated price sensitivity x.

Example

For
prices = [110, 95, 70],

notes = ["10.0% higher than in-store", 
         "5.0% lower than in-store", 
         "Same as in-store"]
and x = 5, the output should be
solution(prices, notes, x) = true.

In-store prices of the first and the second items are 100, and the price of the third item is 70,
which means the customer is overpaying 10 - 5 + 0 = 5, which they are willing to do based on their price sensitivity.

My Solution:

I took the approach to first create a res array with the percentage in price changes depnding on the value in the string notes at index 1 after splitting it. 
In the first for loop I treated each case differently for Same, higher, and lower based on knowledge of how to set up the formula to determine the 
original price based on the (discounted or higher) prices given. I had to strip the entry at values[0] to remove the % sign first in order to perform 
the necessary equation on them. Then I wanted to set up another array for the differences between the given prices and the original prices. 
Here I  used another for loop to iterate through both res and prices arrays to get the pricing difference either negative or positive in value. 
I found I needed to round to 6 decimal places since one of my initial tests failed when the value for x was 0 ( i.e. no price tolerance) and 
I had a price difference of 0.00003 that was rounding to zero and was not getting caught. 
Finally it was a simple matter of determinig if the sum of my diff array was greater than x and returning a Boolean for each case. All tests passed.


def solution(prices, notes, x):
    res = []
    diff = []
    for i in range(len(notes)):
        values = notes[i].split(' ')
        if values[0] == "Same":
            res.append(0)
        elif values[1] == "higher":
            value = (float(values[0].strip('%'))/100) + 1.0
            res.append(value)
        elif values[1] == "lower":
            value = 1.00 - (float(values[0].strip('%'))/100)
            res.append(value)
    
    for j in range(len(res)):
        if res[j] == 0:
            diff.append(0)
        else:
            diff.append(prices[j] - round(prices[j] / res[j], 6))

    return False if sum(diff) > x else True
